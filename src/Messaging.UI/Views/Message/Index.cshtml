@{
    ViewData["Title"] = "Message Page";
}
<style>

  .text {
    font-size: 14px;
  }

  .item {
    margin-bottom: 18px;
  }

  .clearfix:before,
  .clearfix:after {
    display: table;
    content: "";
  }
  .clearfix:after {
    clear: both
  }

  .box-card {
    width: 480px;
  }
  .el-select .el-input {
       width: 130px;
  }
  .input-with-select .el-input-group__prepend {
       background-color: #fff;
  }
</style>

<div id="app">
  
  <div style="width: 600px; display: flex">
    <div>
      <el-select v-model="type" placeholder="请选择" @@change="handleChange()">
        <el-option v-for="type in types" :label="type.name" :key="type.id" :value="type.id"></el-option>
      </el-select>
    </div>
    
    <div style="margin-left: 5px">
      <el-input placeholder="请输入内容" v-model="keywords" class="input-with-select">
        <el-select v-model="key" slot="prepend" placeholder="请选择">
            <el-option v-for="item in keys" :label="item.description" :key="item.key" :value="item.key"></el-option>
        </el-select>
        <el-button slot="append" icon="el-icon-search" @@click="onSearch"></el-button>
      </el-input>
    </div>
  </div>
  
  <div style="margin-top: 10px;">
    <div style="margin-top: 5px;" v-for="notification in notifications">
      <el-card class="box-card">
        <div slot="header" class="clearfix">
          <div style="display:flex;justify-content:space-between">
            <div><span>{{ notification.title }}</span></div>
            <div><el-tag>{{ notification.templateName }}</el-tag></div>
          </div>
        </div>

        <div class="content">
          <div v-html="notification.content">
          </div>
        </div>
      </el-card>
      </div>
  </div>

</div>

@section Scripts {
  <script>
    new Vue({
      el: '#app',
      data: ()=> {
        return {
           type:'',
           key:'',
           keywords:'',
           types:[],
           keys:[],
           notifications:[]
         }
      },
      async created(){
         await this.getTypes();
         await this.getNotifications();
      },
      methods:{
        async handleChange(){
          await this.getKeys(this.type);
        },
        async getTypes(){
          let response = await fetch("http://localhost:5000/api/v1/Message/templates");
          let result = await response.json();
          this.types = result;
       },
       async getKeys(id){
          let response = await fetch(`http://localhost:5000/api/v1/Message/templates/${id}/properties`);
          let result = await response.json();
          this.keys = result;
       },
       async getNotifications(){
          
          let response = await fetch(`http://localhost:5000/api/v1/notification`);
          let result = await response.json();
          this.notifications = result.data;
       },
       async onSearch(){
          let params = {
            templateId:this.type??0,
            property:this.key,
            keyword:this.keywords
          }
          let url = new URL(`http://localhost:5000/api/v1/Notification`);
          url.search = new URLSearchParams(params);
        
          let response = await fetch(url);
          let result = await response.json();
          this.notifications = result.data;
      }
     }, 
    })
  </script>
}